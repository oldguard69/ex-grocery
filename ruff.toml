target-version = "py312"
select = ["ALL"]
ignore = [
  # Disable to use Ruff formatter
  "ISC001",
  # These offer little value
  "EM",
  # These are things we don't use
  "ASYNC",
  "INT",
  "INP",

  # The type of `self` and `cls` should be obvious, no need to add type annotation
  "ANN101",
  "ANN102",
  # There are some valid use of Any
  "ANN401",
  # Trailing comma is useful, but it does not worth the time enforcing
  "COM812",
  # This has high false positive rate. If the value needs to be kept secret,
  # manual review is still required, so this is unnecessary.
  "S105",
  # This is too noisy. If the developer knows shell script, they should at least know
  # how to check if their subprocess.run() works.
  "S603",
  "S607",
  # Documentation should not be enforced everywhere, that will just lead to lots of useless comment
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "D105",
  "D106",
  "D107",
  "D203",
  "D204",
  "D212",
  "D400",
  # Ruff should not interfere too much about what documentation is talking about, it doesn't have
  # enough power to understand that yet.
  "D401",
  "D406",
  "D407",
  "D412",
  "D415",
  # Black enforce line length already, this rule is redundant
  "E501",
  # Lambda is shorter to write, we should catch hard-to-read lambda through code review instead
  "E731",
  # bool has some valid uses, these rules are too noisy to enable
  "FBT001",
  "FBT002",
  "FBT003",
  # It's too much work to satisfy this rule, yet at the end it still fallback to manual check
  # during code review. Dynamic logging message is much simpler.
  "G004",
  # This is sometimes right, but it is too easily to report non-issue, so we will rely on code review
  # to catch this instead. If it can scan the whole project and only warn if all instances of the
  # exception use the same message format, we can re-enable it, but this is unlikely to happen.
  "TRY003",
  "TRY300",
  # The ignore comment must be on the same line, so there will be no room to write the explanation
  "PGH003",
  # Falsy and empty string is not equivalent
  "PLC1901",
  # Magic value are usually required
  "PLR2004",
  "B008",
]
exclude = [
  # This is not valid Python, so Ruff will have trouble scanning it
  "boilerplate-service",
  # This is not our code
  "suicide_risk_prediction",

]

[per-file-ignores]
"deploy/apigateway/resource.py" = ["FLY002"]
"**/services/__init__.py" = [
  # Here we use import to expose only the necessary parts
  "F401",
]
"common/src/common/notice/__init__.py" = ["F401"]
"alembic/**" = [
  # Black does not fix this automatically, and this is too tiny, so it should be disabled
  "D213",
  # Commented out config is normal
  "ERA001",
  # This is dev tool, print is fine
  "T201",
]
"testutils/src/testutils/assertions.py" = [
  # Of course assertion helpers need assert
  "S101",
]
"scripts/**" = [
  # Printing in script is essential
  "T201",
]
"*/tests/**" = [
  # Pytest uses assert, we can't avoid that
  "S101",
  # Logging in tests just doesn't make sense, so this rule is not useful there
  "T201",
]
"deploy/**" = [
  # For deployment, writing directly to stdout is OK
  "T201",
]
"deploy/*/__init__.py" = [
  # Sometimes we need to export things from internal modules
  "F401",
  # We usually need manual ordering to avoid circular imports
  "I001",
]
"tasks/*" = ["T201"]
"githooks/*" = ["T201"]

[flake8-builtins]
builtins-ignorelist = [
  # 99.99% of the time we will never need to call the `id()` built-in function
  "id",
  # We are not writing CLI application, so we don't need the built-in input()
  "input",
]

[pylint]
max-args = 10

[flake8-tidy-imports]
ban-relative-imports = "all"

[isort]
split-on-trailing-comma = false

[pycodestyle]
max-doc-length = 88

[pep8-naming]
classmethod-decorators = ["expression"]
